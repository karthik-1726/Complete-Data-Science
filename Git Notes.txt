git --version


# Configuring Git User Information
--> git config --global user.name "user_name"
--> git config --global user.email "email"


# Verify git user configuration
--> git config --global user.name
--> git config --global user.email


# Initializing a Git Repository
--> git init

# Track Files
--> git status

# Adding Files
--> git add file
or
--> git add .

# Commit Files
--> git commit -m "commit message"                #commit moves changes to the staging environment

# Branch Management
--> git branch
--> git branch -m main                       # Rename master branch to main

# Connecting Local to Remote Repository
--> git remote add origin <repository-url>

# check remote connection
--> git remote -v


# Push code to GitHub
--> git push -u origin main
or 
--> git push origin main


# Modifying and Restoring Files
If you modify a file, Git will show it as modified. You can add the file again to stage the changes, or restore it to the previous version if needed.

--> git restore file_name


# Cloning an Existing Repository
--> git clone <repository-url>

# Committing and pushing after cloning
--> git add .
--> git commit -m "commit message"
--> git push origin main



# Unstaging Files
This command removes the file from the staging area, making it untracked again.

--> git restore --staged file_name
or
git reset file_name (for add . changes)


reset for on head commit
--> git reset HEAD~1 (for one commit) -- uncommit stage just added

reset commit for many changes 
--> git reset <hash of the commit>
or
--> git reset --hard<hash>       (to make the changes in the vs code)





# Viewing Differnence
Shows differences between the staged files and the last commit

--> git diff --staged


** The git commit command takes a snapshot of your staged changes and moves it to the staging area. This snapshot can then be pushed to the main GitHub repository. Think of the staging area as a playground where changes are prepared before being finalized in the remote repository.**


# Branching and Merging

View existing branch
--> git branch

Create new branch
--> git branch new_branch

Switch to new branch
--> git checkout new_branch

Delete any branch
--> git branch -b branch-name	


# Merging branches

First switch to main branch

--> git checkout main

--> git merge new_branch

--> git push origin main



**** Example:
--> git branch
--> git branch developer
--> git checkout developer
Any work or commits you make will be on the developer branch. For example, after creating a new file, you can add and commit it to this branch.
--> git add .
--> git commit -m "commit on branch developer"

# merge developer to main branch
--> git checkout main
--> git merge developer
--> git push origin main



# Viewing Commit History 
--> git log

to view the last three commit with the patch history
--> git log -p -3

Press Q to exit the log view


















